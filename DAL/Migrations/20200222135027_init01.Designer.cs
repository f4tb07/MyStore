// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(MyStorContex))]
    [Migration("20200222135027_init01")]
    partial class init01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Categury", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CateuryTbl");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CateguryID")
                        .HasColumnType("int");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("inStoreCount")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CateguryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.ProductImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelatedProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RelatedProductID");

                    b.ToTable("ProductImageTbl");
                });

            modelBuilder.Entity("Domain.ProductOff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("RelatedProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RelatedProductID");

                    b.ToTable("OffTbl");
                });

            modelBuilder.Entity("Domain.ProductPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RelatedProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RgisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Todate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("RelatedProductID");

                    b.ToTable("PriceTbl");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.HasOne("Domain.Categury", null)
                        .WithMany("ProductList")
                        .HasForeignKey("CateguryID");
                });

            modelBuilder.Entity("Domain.ProductImage", b =>
                {
                    b.HasOne("Domain.Product", "RelatedProduct")
                        .WithMany("ImagesList")
                        .HasForeignKey("RelatedProductID");
                });

            modelBuilder.Entity("Domain.ProductOff", b =>
                {
                    b.HasOne("Domain.Product", "RelatedProduct")
                        .WithMany("OffList")
                        .HasForeignKey("RelatedProductID");
                });

            modelBuilder.Entity("Domain.ProductPrice", b =>
                {
                    b.HasOne("Domain.Product", "RelatedProduct")
                        .WithMany("PriceHistory")
                        .HasForeignKey("RelatedProductID");
                });
#pragma warning restore 612, 618
        }
    }
}
